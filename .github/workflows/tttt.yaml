name: Build Windows Executable

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:  # Permet de lancer manuellement

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: x86_64-pc-windows-msvc
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Cache Bun dependencies
      uses: actions/cache@v4
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
    
    - name: Install frontend dependencies
      run: bun install
    
    - name: Check and create missing icons
      run: |
        # Vérifier si le dossier icons existe
        if (-not (Test-Path "src-tauri/icons")) {
          Write-Host "Creating icons directory..."
          New-Item -ItemType Directory -Path "src-tauri/icons" -Force
        }
        
        # Vérifier si icon.ico existe
        if (-not (Test-Path "src-tauri/icons/icon.ico")) {
          Write-Host "icon.ico not found, creating placeholder..."
          # Télécharger un placeholder icon ou créer un basique
          try {
            Invoke-WebRequest -Uri "https://raw.githubusercontent.com/tauri-apps/tauri/dev/tooling/cli/templates/vanilla/src-tauri/icons/icon.ico" -OutFile "src-tauri/icons/icon.ico"
            Write-Host "Downloaded default Tauri icon"
          } catch {
            Write-Host "Failed to download icon, creating minimal ICO file"
            # Créer un fichier ICO minimal (32x32 transparent)
            $icoBytes = [System.Convert]::FromBase64String("AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAAAAD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==")
            [System.IO.File]::WriteAllBytes("src-tauri/icons/icon.ico", $icoBytes)
            Write-Host "Created minimal ICO file"
          }
        } else {
          Write-Host "icon.ico already exists"
        }
        
        # Vérifier les autres icônes couramment requises
        $requiredIcons = @("icon.png", "32x32.png", "128x128.png", "128x128@2x.png", "icon.icns")
        foreach ($icon in $requiredIcons) {
          if (-not (Test-Path "src-tauri/icons/$icon")) {
            Write-Host "Missing icon: $icon - will try to generate from icon.ico"
          }
        }
    
    - name: Install WebView2
      run: |
        Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/p/?LinkId=2124703" -OutFile "MicrosoftEdgeWebview2Setup.exe"
        Start-Process -FilePath "MicrosoftEdgeWebview2Setup.exe" -ArgumentList "/silent /install" -Wait
    
    - name: Debug Tauri configuration
      run: |
        Write-Host "Checking Tauri configuration..."
        if (Test-Path "src-tauri/tauri.conf.json") {
          Write-Host "tauri.conf.json exists"
          Get-Content "src-tauri/tauri.conf.json" | Select-Object -First 20
        } else {
          Write-Host "tauri.conf.json not found"
        }
        
        Write-Host "`nChecking icons directory:"
        if (Test-Path "src-tauri/icons") {
          Get-ChildItem "src-tauri/icons" | ForEach-Object { Write-Host "  - $($_.Name)" }
        } else {
          Write-Host "Icons directory not found"
        }
        
        Write-Host "`nChecking Cargo.toml:"
        if (Test-Path "src-tauri/Cargo.toml") {
          Write-Host "Cargo.toml exists"
          Get-Content "src-tauri/Cargo.toml" | Select-Object -First 15
        } else {
          Write-Host "Cargo.toml not found"
        }
    
    - name: Build Tauri application (with error handling)
      run: |
        Write-Host "Starting Tauri build..."
        try {
          bun run tauri build --verbose
        } catch {
          Write-Host "Build failed, trying alternative approach..."
          Write-Host "Error details: $_"
          
          # Essayer de build seulement l'exécutable sans les bundles
          Write-Host "Attempting to build executable only..."
          cd src-tauri
          cargo build --release
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Cargo build successful"
            # Copier l'exécutable vers un emplacement attendu
            if (Test-Path "target/release/claudia.exe") {
              Copy-Item "target/release/claudia.exe" "../claudia.exe"
              Write-Host "Executable copied to root directory"
            }
          } else {
            Write-Host "Cargo build also failed"
            exit 1
          }
        }
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
    
    - name: List build artifacts
      run: |
        Write-Host "Build artifacts:"
        Get-ChildItem -Path "src-tauri/target/release/" -Recurse -File | Where-Object { $_.Name -match "\.(exe|msi)$" } | ForEach-Object { Write-Host $_.FullName }
    
    - name: Upload executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: claudia-windows-exe
        path: |
          src-tauri/target/release/claudia.exe
          claudia.exe
        retention-days: 30
      continue-on-error: true
    
    - name: Upload MSI installer (if exists)
      uses: actions/upload-artifact@v4
      with:
        name: claudia-windows-installer
        path: src-tauri/target/release/bundle/msi/*.msi
        retention-days: 30
      continue-on-error: true
    
    - name: Upload to Release (if release)
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          src-tauri/target/release/claudia.exe
          src-tauri/target/release/bundle/msi/*.msi
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job optionnel pour tester l'exécutable
  test-executable:
    needs: build-windows
    runs-on: windows-latest
    if: github.event_name != 'release'
    
    steps:
    - name: Download executable
      uses: actions/download-artifact@v4
      with:
        name: claudia-windows-exe
        path: ./
    
    - name: Test executable
      run: |
        Write-Host "Testing executable..."
        if (Test-Path "./claudia.exe") {
          Write-Host "✅ Executable exists"
          $fileInfo = Get-Item "./claudia.exe"
          Write-Host "File size: $($fileInfo.Length) bytes"
          Write-Host "Creation time: $($fileInfo.CreationTime)"
        } else {
          Write-Host "❌ Executable not found"
          exit 1
        }
